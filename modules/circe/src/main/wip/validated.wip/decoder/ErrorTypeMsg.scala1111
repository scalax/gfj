package org.scalax.ugeneric.circe.decoder

trait ErrorTypeMsg[T] {
  def msg(fieldName: String): String
}

object ErrorTypeMsg {
  implicit val errorTypeMsgIntTypeClass: ErrorTypeMsg[Int] = new ErrorTypeMsg[Int] {
    override def msg(fieldName: String): String = {
      s"${fieldName}必须为整数"
    }
  }

  implicit val errorTypeMsgLongTypeClass: ErrorTypeMsg[Long] = new ErrorTypeMsg[Long] {
    override def msg(fieldName: String): String = {
      s"${fieldName}必须为整数"
    }
  }

  implicit val errorTypeMsgDoubleTypeClass: ErrorTypeMsg[Double] = new ErrorTypeMsg[Double] {
    override def msg(fieldName: String): String = {
      s"${fieldName}必须为数字"
    }
  }

  implicit val errorTypeMsgFloatTypeClass: ErrorTypeMsg[Float] = new ErrorTypeMsg[Float] {
    override def msg(fieldName: String): String = {
      s"${fieldName}必须为数字"
    }
  }

  implicit val errorTypeMsgStringTypeClass: ErrorTypeMsg[String] = new ErrorTypeMsg[String] {
    override def msg(fieldName: String): String = {
      s"${fieldName}必须为字符"
    }
  }
}
